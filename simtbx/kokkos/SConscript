import os
import subprocess
from shutil import copy

import libtbx.load_env
from libtbx.env_config import get_boost_library_with_python_version

#
# WEH - Is this function used?  This doesn't detect GPUs for Aurora
#
def detect_architecture(verbose=True):
  if verbose:
    print('Looking for GPUs ...')
  available_gpu = subprocess.check_output(['nvidia-smi', '--query-gpu=name', '--format=csv,noheader'])
  available_gpu = available_gpu.split(b'\n')
  first_entry = available_gpu[0].decode('utf8')
  if len(first_entry)>0:
    if verbose:
      print( ' Found ', first_entry)
    if 'A100' in first_entry:
      architecture = "Ampere80"
    else:
      architecture = "Volta70"
  else:
    architecture = "HSW"
  return architecture

class system_config(object):
  def __init__(self, host_variable, host_name):
    self.host_variable = host_variable
    self.host_name = host_name
    self.env = {}

  def is_host(self):
    #
    # WEH - the jlse login nodes all start with the same prefix.  Maybe use a regular expression here?
    #return (self.host_name==os.getenv(self.host_variable))
    #
    return (os.getenv(self.host_variable) is not None and os.getenv(self.host_variable).startswith(self.host_name))

  def get_copy(self):
    clone = system_config(self.host_variable, self.host_name)
    clone.env = dict(self.env)
    return clone

cfg_default = system_config(host_variable = 'NO_WHERE', host_name='N/A')
cfg_default.env['KOKKOS_DEVICES'] = "OpenMP"
cfg_default.env['KOKKOS_ARCH'] = "HSW"
cfg_default.env['KOKKOS_CUDA_OPTIONS'] = ""
cfg_default.env['LDFLAGS'] = "-Llib"
cfg_default.env['LDLIBS'] = "-lkokkos -ldl"
cfg_default.env['CXX'] = 'g++'

configs = []

cfg_corigpu = cfg_default.get_copy()
cfg_corigpu.host_variable = 'NERSC_HOST'
cfg_corigpu.host_name = 'cori' 
cfg_corigpu.env['KOKKOS_DEVICES'] = "Cuda"
cfg_corigpu.env['KOKKOS_ARCH'] = "Volta70"
cfg_corigpu.env['KOKKOS_CUDA_OPTIONS'] = "enable_lambda,force_uvm"
cfg_corigpu.env['LDFLAGS'] += " -L$(CUDA_HOME)/lib64"
cfg_corigpu.env['LDLIBS'] += " -lcudart -lcuda"
cfg_corigpu.env['CXX'] = ''
configs.append(cfg_corigpu)

cfg_perlmutter = cfg_corigpu.get_copy()
cfg_perlmutter.host_name = 'perlmutter'
cfg_perlmutter.env['KOKKOS_ARCH'] = 'Ampere80'
configs.append(cfg_perlmutter)

cfg_spock = cfg_default.get_copy()
cfg_spock.host_variable = 'LMOD_SYSTEM_NAME'
cfg_spock.host_name = 'spock'
cfg_spock.env['KOKKOS_DEVICES'] = "HIP"
cfg_spock.env['KOKKOS_ARCH'] = "Vega908"
cfg_spock.env['CXX'] = 'hipcc'
configs.append(cfg_spock)

cfg_arcticus = cfg_default.get_copy()
cfg_arcticus.host_variable = 'HOSTNAME'
cfg_arcticus.host_name = 'arcticus'
cfg_arcticus.env['KOKKOS_DEVICES'] = "SYCL"
cfg_arcticus.env['KOKKOS_ARCH'] = ""
cfg_arcticus.env['LDFLAGS'] = ""
#cfg_arcticus.env['LDFLAGS'] = " -fsycl -DKOKKOS_DEPENDENCE"
cfg_arcticus.env['LDLIBS'] = " -ldl"
cfg_arcticus.env['CXX'] = 'dpcpp'
configs.append(cfg_arcticus)

system_settings = cfg_default.env
for cfg in configs:
  if cfg.is_host():
    print("System Hostname: {}".format(cfg.host_name))
    system_settings = cfg.env
    break

# libkokkos.a
# call kokkos build system directly
# set environment variable defaults if necessary
if os.getenv('KOKKOS_DEVICES') is None:
  os.environ['KOKKOS_DEVICES'] = system_settings['KOKKOS_DEVICES']
if os.getenv('KOKKOS_PATH') is None:
  if os.getenv('KOKKOS_HOME') is None:
    os.environ['KOKKOS_PATH'] = libtbx.env.under_dist('simtbx', '../../kokkos')
  else:
    os.environ['KOKKOS_PATH'] = os.getenv('KOKKOS_HOME')
if os.getenv('KOKKOS_ARCH') is None:
  os.environ['KOKKOS_ARCH'] = system_settings['KOKKOS_ARCH']
if os.getenv('KOKKOS_CUDA_OPTIONS') is None:
  os.environ['KOKKOS_CUDA_OPTIONS'] = system_settings['KOKKOS_CUDA_OPTIONS']
#
# WEH - TODO
#       Double check that it makes sense to define CUDAREAL at ALCF
#
os.environ['CXX'] = system_settings['CXX']
os.environ['CXXFLAGS'] = '-O3 -fPIC -DCUDAREAL=double -DKokkos_ENABLE_OPENMP=OFF -DKokkos_ENABLE_SYCL=ON -DNDEBUG -DKOKKOS_DEVICES=SYCL -Wno-deprecated-declarations'
os.environ['LDFLAGS'] = system_settings['LDFLAGS']
os.environ['LDLIBS'] = system_settings['LDLIBS']
#
# WEH - TODO
#       How should we set this value?  SYCL requires c++17
#
os.environ['KOKKOS_CXX_STANDARD'] = "c++17"

original_cxx = None
kokkos_lib = 'libkokkos.a'
kokkos_cxxflags = None

if os.getenv('CXX') is not None:
  original_cxx = os.environ['CXX']
if 'Cuda' in os.getenv('KOKKOS_DEVICES'):
  os.environ['CXX'] = os.path.join(os.environ['KOKKOS_PATH'], 'bin', 'nvcc_wrapper')
else:
  os.environ['CXX'] = system_settings['CXX']
  os.environ['SHCXX'] = system_settings['CXX']

#
# WEH - TODO
#       What configuration option should we used to disable local kokkos builds?
#
Import("env", "env_etc")
if os.getenv('KOKKOS_HOME') is None:
    print('='*79)
    print('Building Kokkos')
    print('-'*79)
    returncode = subprocess.call(['make', '-f', 'Makefile.kokkos', kokkos_lib],
                                  cwd=os.environ['KOKKOS_PATH'])
    print()

    print('Copying Kokkos library')
    print('-'*79)
    src = os.path.join(os.environ['KOKKOS_PATH'], kokkos_lib)
    dst = os.path.join(libtbx.env.under_build('lib'), kokkos_lib)
    if os.path.isfile(src):
      copy(src, dst)
      print('Copied')
      print('  source:     ', src)
      print('  destination:', dst)
    else:
      print('Error: {src} does not exist'.format(src=src))
    print()

    print('Getting environment variables')
    print('-'*79)
    kokkos_cxxflags = subprocess.check_output(
      ['make', '-f', 'Makefile.kokkos', 'print-cxx-flags'],
      cwd=os.environ['KOKKOS_PATH'])
    kokkos_cxxflags = kokkos_cxxflags.split(b'\n')
    kokkos_cxxflags = kokkos_cxxflags[1].decode('utf8').split()
    print("Kokkos CXXFLAGS:",kokkos_cxxflags)
    kokkos_libname="kokkos"
    print('='*79)
else:
    print('='*79)
    kokkos_cxxflags = [val.replace('c++11', 'c++17') for val in env['CXXFLAGS']]
    print("Kokkos CXXFLAGS:",kokkos_cxxflags)
    kokkos_libname="kokkoscore"
    print('='*79)

#
# Build libsimtbx_kokkos.so
#

#print("HERE?", os.environ['CXX'])
kokkos_env = env.Clone()
kokkos_env.Replace(CXX=os.environ['CXX'])
kokkos_env.Replace(SHCXX=os.environ['CXX'])
kokkos_env.Replace(SHLINK=os.environ['CXX'])
kokkos_env.Replace(SHLINKFLAGS=[val.replace('c++11','c++17') for val in env['SHLINKFLAGS']])
kokkos_env.Prepend(SHCXXFLAGS=['-DCUDAREAL=double'] + kokkos_cxxflags)
kokkos_env.Prepend(CXXFLAGS=['-DCUDAREAL=double'] + kokkos_cxxflags)
kokkos_env.Prepend(CPPFLAGS=['-DCUDAREAL=double'] + kokkos_cxxflags)
kokkos_env.Prepend(CPPPATH=[os.environ['KOKKOS_PATH']])
kokkos_env.Append(LIBS=['sycl'])

#print("HERE!", kokkos_env['SHCXXCOM'])
simtbx_kokkos_lib = kokkos_env.SharedLibrary(
  target="#lib/libsimtbx_kokkos.so",
  source=[
    'detector.cpp',
    'kokkos_instance.cpp',
    'kokkos_utils.cpp',
    'simulation.cpp',
    'structure_factors.cpp'
  ]
)

#print("HERE - y", os.getenv('KOKKOS_DEVICES'))
#
# Build simtbx_kokkos_ext.so
#
if not env_etc.no_boost_python:
  Import("env_no_includes_boost_python_ext")
  kokkos_ext_env = env_no_includes_boost_python_ext.Clone()

  env_etc.include_registry.append(
    env=kokkos_ext_env,
    paths=env_etc.simtbx_common_includes + [env_etc.python_include])
  kokkos_ext_env.Replace(CXX=os.environ['CXX'])
  kokkos_ext_env.Replace(SHCXX=os.environ['CXX'])
  kokkos_ext_env.Replace(SHLINK=os.environ['CXX'])
  kokkos_ext_env.Prepend(SHCXXFLAGS=['-DCUDAREAL=double'] + kokkos_cxxflags)
  kokkos_ext_env.Prepend(CXXFLAGS=['-DCUDAREAL=double'] + kokkos_cxxflags)
  kokkos_ext_env.Prepend(CPPFLAGS=['-DCUDAREAL=double'] + kokkos_cxxflags)
  kokkos_ext_env.Prepend(CPPPATH=[os.environ['KOKKOS_PATH']])
  if 'Cuda' in os.getenv('KOKKOS_DEVICES'):
    kokkos_ext_env.Append(LIBPATH=[os.path.join(os.environ['CUDA_HOME'], 'lib64')])
    kokkos_ext_env.Append(LIBS=env_etc.libm +
      ["simtbx_kokkos",
      "scitbx_boost_python",
      get_boost_library_with_python_version("boost_python", kokkos_ext_env['LIBPATH']),
      "cctbx",
      "kokkos",
      "cudart",
      "cuda"])
  elif 'HIP' in os.getenv('KOKKOS_DEVICES'):
    kokkos_ext_env.Append(LIBPATH=[os.path.join(os.environ['ROCM_PATH'], 'lib')])
    kokkos_ext_env.Append(LIBS=env_etc.libm +
      ["simtbx_kokkos",
      "scitbx_boost_python",
      get_boost_library_with_python_version("boost_python", kokkos_ext_env['LIBPATH']),
      "cctbx",
      "kokkos",
      "amdhip64",
      "hsa-runtime64"])
  elif 'SYCL' in os.getenv('KOKKOS_DEVICES'):
    print("Building with SYCL")
    kokkos_ext_env.Append(LIBS=env_etc.libm +
      ["simtbx_kokkos",
      "scitbx_boost_python",
      get_boost_library_with_python_version("boost_python", kokkos_ext_env['LIBPATH']),
      "cctbx",
      kokkos_libname])
  else:
    kokkos_ext_env.Append(LIBS=env_etc.libm +
      ["simtbx_kokkos",
      "scitbx_boost_python",
      get_boost_library_with_python_version("boost_python", kokkos_ext_env['LIBPATH']),
      "cctbx",
      "kokkos"])

  #print("HERE!!", kokkos_ext_env['SHCXX'])
  #print("HERE!!", kokkos_ext_env['SHLINK'])
  simtbx_kokkos_ext = kokkos_ext_env.SharedLibrary(
    target="#lib/simtbx_kokkos_ext.so",
    source=['kokkos_ext.cpp']
  )

# reset CXX
if original_cxx is not None:
  os.environ['CXX'] = original_cxx
  os.environ['SHCXX'] = original_cxx
